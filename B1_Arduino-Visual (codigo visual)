#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include "SerialClass/SerialClass.h"

#define MAX_BUFFER 200
#define PAUSA_MS 200

// Funciones prototipo
void verifica_finaldecarrera(Serial*, char*);
float leer_finaldecarrera(Serial*);
int Enviar_y_recibir(Serial*, const char*, char*);
float float_from_cadena(char*);

// Menú de opciones
int menu(void)
{
	int opcion;
	printf("\n");
	printf("Menú Principal\n");
	printf("==============\n");
	printf("1 - Verificar sensores.\n");
	printf("2 - Salir de la aplicación\n");
	printf("Opción:");
	scanf_s("%d", &opcion);
	return opcion;
}


// Menú principal (llamada a las prototipo)
int main(void)
{
	Serial* Arduino; //Variable que representa internamente la placa de Arduino
	char puerto[] = "COM3"; //A qué puerto se conecta Arduino?
	int opcion_menu;

	setlocale(LC_ALL, "ES_es");
	Arduino = new Serial((char*)puerto);
	do
	{
		opcion_menu = menu();
		switch (opcion_menu)
		{
		case 1:
			verifica_finaldecarrera(Arduino, puerto);
			break;
		case 2:
			break;
		default:
			printf("Opción inválida\n");
		}
	} while (opcion_menu != 2);
	return 0;
}


// Mandar a Arduino a verificar el estado del final de carrera
void verifica_finaldecarrera(Serial* Arduino, char* port)
{
	float detecta;

	if (Arduino->IsConnected())
	{
		detecta = leer_finaldecarrera(Arduino);
		
	}
	else
	{
		printf("No se ha podido conectar con Arduino. Verifique la conexión, \nel puerto %s y desactive el monitor seíe del IDE DE Arduino\n", port);
	}
}


// Interpretar resultado obtenido del final de carrera
float leer_finaldecarrera(Serial* Arduino)
{
	float detecta;
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	bytesRecibidos = Enviar_y_recibir(Arduino,"GET_DETECTA\n", mensaje_recibido);

	if (bytesRecibidos <= 0)
	{
		printf("No se ha recibido respuesta");
		detecta = -1;
	}
	else
	{
		printf("La respuesta contiene %d bytes. Recibido=\n%s", bytesRecibidos, mensaje_recibido);

		detecta = float_from_cadena(mensaje_recibido);
	}

	return detecta;
}


// ????
int Enviar_y_recibir(Serial* Arduino, const char* mensaje_enviar, char* mensaje_recibir)
{
	int bytes_recibidos = 0, total = 0;
	int intentos = 0, fin_linea = 0;

	Arduino->WriteData((char*)mensaje_enviar, strlen(mensaje_enviar));
	Sleep(PAUSA_MS);
	bytes_recibidos = Arduino->ReadData(mensaje_recibir, sizeof(char) * MAX_BUFFER - 1);

	while ((bytes_recibidos > 0 || intentos < 5) && fin_linea == 0)
	{
		if (bytes_recibidos > 0)
		{
			total += bytes_recibidos;
			if (mensaje_recibir[total - 1] == 13 || mensaje_recibir[total - 1] == 10)
				fin_linea = 1;
		}
		else
			intentos++;
		Sleep(PAUSA_MS);
		bytes_recibidos = Arduino->ReadData(mensaje_recibir + total, sizeof(char) * MAX_BUFFER - 1);
	}
	if (total > 0)
		mensaje_recibir[total - 1] = '\0';

	return total;
}

float float_from_cadena(char* cadena)
{
	float numero = 0;
	int i, divisor = 10, estado = 0;


	for (i = 0; cadena[i] != '\0' && estado != 3 && i < MAX_BUFFER; i++)
		switch (estado)
		{
		case 0:// Antes del n�mero
			if (cadena[i] >= '0' && cadena[i] <= '9')
			{
				numero = cadena[i] - '0';
				estado = 1;
			}
			break;
		case 1:// Durante el n�mero
			if (cadena[i] >= '0' && cadena[i] <= '9')
				numero = numero * 10 + cadena[i] - '0';
			else
				if (cadena[i] == '.' || cadena[i] == ',')
					estado = 2;
				else
					estado = 3;
			break;
		case 2: // Parte decimal
			if (cadena[i] >= '0' && cadena[i] <= '9')
			{
				numero = numero + (float)(cadena[i] - '0') / divisor;
				divisor *= 10;
			}
			else
				estado = 3;
			break;
		}
	return numero;
}

